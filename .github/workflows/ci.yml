name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" 
          --health-interval 5s 
          --health-timeout 5s 
          --health-retries 10

    env:
      DATABASE_URL: postgresql+psycopg://postgres:postgres@localhost:5432/postgres

    steps:
      - uses: actions/checkout@v4

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Cache HuggingFace
        uses: actions/cache@v4
        with:
          path: ~/.cache/huggingface
          key: hf-${{ runner.os }}-${{ env.EMBEDDING_MODEL }}
          restore-keys: |
            hf-${{ runner.os }}-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint (ruff)
        run: ruff check .

      - name: Format check (black)
        run: black --check .

      - name: Type check (mypy)
        run: mypy .

      - name: Migrations
        run: alembic -c db/alembic.ini upgrade head

      - name: Tests (unit only)
        run: pytest -m "not integration" -q

      - name: Smoke (ingest + query)
        env:
          ENABLE_METRICS: "true"
          WARMUP_MODELS: "false"
          HYBRID_ENABLED: "false"
        run: |
          python - <<'PY'
          from fastapi.testclient import TestClient
          from app.main import app
          client = TestClient(app)
          # ingest
          r = client.post("/ingest", files={"file": ("ci.txt", b"FastAPI CI smoke test.", "text/plain")})
          assert r.status_code == 200, r.text
          # query
          r = client.post("/query", json={"query": "FastAPI", "top_k": 3})
          assert r.status_code == 200, r.text
          assert len(r.json().get("results", [])) >= 1
          PY

      - name: Eval (generate artifacts)
        if: always()
        env:
          ENABLE_METRICS: "false"
          WARMUP_MODELS: "false"
          HYBRID_ENABLED: "false"
        run: |
          # Start app in background
          uvicorn app.main:app --host 127.0.0.1 --port 8000 &
          APP_PID=$!
          python -c "import time; time.sleep(5)"
          python seeds/eval_seed.py
          python scripts/eval.py
          kill $APP_PID || true

      - name: Upload eval artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: eval-reports
          path: reports/*
